import multiprocessing as mp

from dataclasses import asdict
from pathlib import Path
from typing import List

import click

from iohub.ngff import Plate, open_ome_zarr

from mantis.cli import utils
from mantis.analysis.AnalysisSettings import DeskewSettings
from mantis.analysis.deskew import deskew_data, get_deskewed_data_shape
from mantis.cli.parsing import (
    deskew_param_argument,
    input_data_paths_argument,
    output_dataset_options,
)
import yaml


# TODO: consider refactoring to utils
def deskew_params_from_file(deskew_param_path: Path) -> DeskewSettings:
    """Parse the deskewing parameters from the yaml file"""
    # Load params
    with open(deskew_param_path) as file:
        raw_settings = yaml.safe_load(file)
    settings = DeskewSettings(**raw_settings)
    click.echo(f"Deskewing parameters: {asdict(settings)}")
    return settings


@click.command()
@input_data_paths_argument()
@deskew_param_argument()
@output_dataset_options(default="./deskewed.zarr")
@click.option(
    "--num-processes",
    "-j",
    default=mp.cpu_count(),
    help="Number of cores",
    required=False,
    type=int,
)
def deskew(
    input_paths: List[Path], deskew_param_path: Path, output_path: Path, num_processes: int
):
    "Deskews a single position across T and C axes using a parameter file generated by estimate_deskew.py"
    if isinstance(open_ome_zarr(input_paths[0]), Plate):
        raise ValueError(
            "Please supply a single position instead of an HCS plate. Likely fix: replace input.zarr with 'input.zarr/0/0/0'"
        )

    # Handle single position or wildcard filepath
    output_paths = utils.get_output_paths(input_paths, output_path)
    click.echo(f'List of input_pos:{input_paths} output_pos:{output_paths}')

    # Get the deskewing parameters
    # Load the first position to infer dataset information
    with open_ome_zarr(str(input_paths[0]), mode="r") as input_dataset:
        T, C, Z, Y, X = input_dataset.data.shape
        settings = deskew_params_from_file(deskew_param_path)
        deskewed_shape, voxel_size = get_deskewed_data_shape(
            (Z, Y, X),
            settings.ls_angle_deg,
            settings.px_to_scan_ratio,
            settings.keep_overhang,
            settings.pixel_size_um,
        )

        # Create a zarr store output to mirror the input
        utils.create_empty_zarr(
            input_paths,
            output_path,
            output_zyx_shape=deskewed_shape,
            chunk_zyx_shape=deskewed_shape,
            voxel_size=voxel_size,
        )

    deskew_args = {
        'ls_angle_deg': settings.ls_angle_deg,
        'px_to_scan_ratio': settings.px_to_scan_ratio,
        'keep_overhang': settings.keep_overhang,
        'extra_metadata': {'deskew': asdict(settings)},
    }

    # Loop over positions
    for input_position_path, output_position_path in zip(input_paths, output_paths):
        utils.process_single_position(
            deskew_data,
            input_data_path=input_position_path,
            output_path=output_position_path,
            num_processes=num_processes,
            **deskew_args,
        )
