import multiprocessing as mp

from dataclasses import asdict
from pathlib import Path
from typing import List

import click

from iohub.ngff import Plate, open_ome_zarr

from mantis.analysis.AnalysisSettings import DeskewSettings
from mantis.analysis.deskew import deskew_data, get_deskewed_data_shape
from mantis.cli import utils
from mantis.cli.parsing import config_filepath, input_position_dirpaths, output_dirpath


# TODO: consider refactoring to utils
def deskew_params_from_file(deskew_param_path: Path) -> DeskewSettings:
    """Parse the deskewing parameters from the yaml file"""
    # Load params
    with open(deskew_param_path) as file:
        raw_settings = yaml.safe_load(file)
    settings = DeskewSettings(**raw_settings)
    click.echo(f"Deskewing parameters: {asdict(settings)}")
    return settings


@click.command()
@input_position_dirpaths()
@config_filepath()
@output_dirpath()
@click.option(
    "--num-processes",
    "-j",
    default=mp.cpu_count(),
    help="Number of cores",
    required=False,
    type=int,
)
def deskew(
    input_position_dirpaths: List[str],
    config_filepath: str,
    output_dirpath: str,
    num_processes: int,
):
    """
    Deskew a single position across T and C axes using a configuration file generated by estimate_deskew.py

    >> mantis deskew -i ./input.zarr/*/*/* -c ./deskew_params.yml -o ./output.zarr
    """
    if isinstance(open_ome_zarr(input_position_dirpaths[0]), Plate):
        raise ValueError(
            "Please supply a single position instead of an HCS plate. Likely fix: replace input.zarr with 'input.zarr/0/0/0'"
        )

    # Sort the input as nargs=-1 will not be natsorted
    input_position_dirpaths = [Path(path) for path in natsorted(input_position_dirpaths)]

    # Convert string paths to Path objects
    output_dirpath = Path(output_dirpath)
    config_filepath = Path(config_filepath)

    # Handle single position or wildcard filepath
    output_paths = get_output_paths(input_position_dirpaths, output_dirpath)
    click.echo(f'List of input_pos:{input_position_dirpaths} output_pos:{output_paths}')

    # Create a zarr store output to mirror the input
    create_empty_zarr(input_position_dirpaths, config_filepath, output_dirpath)

    # Loop over positions
    for input_position_path, output_position_path in zip(
        input_position_dirpaths, output_paths
    ):
        deskew_single_position(
            input_data_path=input_position_path,
            output_path=output_position_path,
            deskew_param_path=config_filepath,
            num_processes=num_processes,
            **deskew_args,
        )
